as.color <- function(x, alpha){
#set color alpha, or default to 0.5
if(missing(alpha)){
alpha <- 0.5
}
#get the number of colors needed
numcols <- unique(x)
colseqR <- seq(0, 1, length.out=255)
colseqG <- seq(0, 1, length.out=255)
colseqB <- seq(0, 1, length.out=255)
#check for number of input colors
if( length(numcols) > 255){
warning("The input vector requires a large number of colors,
some colors will be recycled, or appear extremely similar visually.")
}
#create colors
r <- sample(colseqR, length(numcols), replace = T)
g <- sample(colseqG, length(numcols), replace = T)
b <- sample(colseqB, length(numcols), replace = T)
colz <- rgb(red = r, green = g, blue = b, alpha = alpha)
#assign colors to input values
colvec <- rep(NA, length(x))
for(i in 1:length(numcols)){
colvec[x %in% numcols[i] ] <- colz[i]
}
return(colvec)
}
#simple data frame with factors
set.seed(12345) #make results reproducible
n <- 100
f <- 5
x <- sort(rnorm(n, mean = 0, sd = 50)) + rnorm(n, mean = 0, sd = 30)
fact <- rep(letters[1:5], each=n/f)
#call to as.color, with char vector
colz <- as.color(fact, alpha = 1)
plotx <- as.integer(as.factor(fact))
plot( jitter(plotx), x, col=colz, pch=19)
#call to as.color, with char vector
colz <- as.color(fact, alpha = 0.5)
plotx <- as.integer(as.factor(fact))
plot( jitter(plotx), x, col=colz, pch=19)
colz
x
x
#get the number of colors needed
numcols <- unique(x)
colseqR <- seq(0, 1, length.out=255)
colseqG <- seq(0, 1, length.out=255)
colseqB <- seq(0, 1, length.out=255)
#check for number of input colors
if( length(numcols) > 255){
warning("The input vector requires a large number of colors,
some colors will be recycled, or appear extremely similar visually.")
}
#create colors
r <- sample(colseqR, length(numcols), replace = T)
g <- sample(colseqG, length(numcols), replace = T)
b <- sample(colseqB, length(numcols), replace = T)
colz <- rgb(red = r, green = g, blue = b, alpha = alpha)
alpha <- 0.5
#create colors
r <- sample(colseqR, length(numcols), replace = T)
g <- sample(colseqG, length(numcols), replace = T)
b <- sample(colseqB, length(numcols), replace = T)
colz <- rgb(red = r, green = g, blue = b, alpha = alpha)
colz
i <- 1
i <- 1
numcols
numcols[i]
fact <- rep(letters[1:5], each=n/f)
fact
fact
fact
x <- fact
#get the number of colors needed
numcols <- unique(x)
colseqR <- seq(0, 1, length.out=255)
colseqG <- seq(0, 1, length.out=255)
colseqB <- seq(0, 1, length.out=255)
#check for number of input colors
if( length(numcols) > 255){
warning("The input vector requires a large number of colors,
some colors will be recycled, or appear extremely similar visually.")
}
#create colors
r <- sample(colseqR, length(numcols), replace = T)
g <- sample(colseqG, length(numcols), replace = T)
b <- sample(colseqB, length(numcols), replace = T)
colz <- rgb(red = r, green = g, blue = b, alpha = alpha)
x
length(numcols)
numcols[i]
x
x %in% numcols[i]
x
numcols[i]
x %in% numcols[i]
tibble(
numcols ,
x
)
library(tidyverse)
as_tibble
as_tibble(
numcols ,
x
)
tibble(
numcols ,
x
)
tibble(
numcols = numcols,
x = x
)
numcols
x
colvec
colz
tibble(
numcols = numcols,
colz = colz
)
tibble(
x = numcols,
colz = colz
) %>%
left_join()
tibble(
x = numcols,
colz = colz
)
x
tibble(x = x)
tibble(
x = numcols,
colz = colz
) %>%
left_join(tibble(x = x), ., by = ",")
tibble(
x = numcols,
colz = colz
) %>%
left_join(tibble(x = x), ., by = "x")
tibble(
x = numcols,
colz = colz
) %>%
left_join(tibble(x = x), ., by = "x") %>%
pull(colz)
as.color <- function(x, alpha = 0.5){
#get the number of colors needed
numcols <- unique(x)
colseqR <- seq(0, 1, length.out=255)
colseqG <- seq(0, 1, length.out=255)
colseqB <- seq(0, 1, length.out=255)
#check for number of input colors
if( length(numcols) > 255){
warning("The input vector requires a large number of colors,
some colors will be recycled, or appear extremely similar visually.")
}
#create colors
r <- sample(colseqR, length(numcols), replace = T)
g <- sample(colseqG, length(numcols), replace = T)
b <- sample(colseqB, length(numcols), replace = T)
colz <- rgb(red = r, green = g, blue = b, alpha = alpha)
tibble(
x = numcols,
colz = colz
) %>%
left_join(tibble(x = x), ., by = "x") %>%
pull(colz)
}
#simple data frame with factors
set.seed(12345) #make results reproducible
n <- 100
f <- 5
x <- sort(rnorm(n, mean = 0, sd = 50)) + rnorm(n, mean = 0, sd = 30)
fact <- rep(letters[1:5], each=n/f)
#call to as.color, with char vector
colz <- as.color(fact, alpha = 0.5)
plotx <- as.integer(as.factor(fact))
plot(jitter(plotx), x, col=colz, pch=19)
library(tidyverse)
as.color <- function(x, alpha = 0.5){
#get the number of colors needed
numcols <- unique(x)
colseqR <- seq(0, 1, length.out=255)
colseqG <- seq(0, 1, length.out=255)
colseqB <- seq(0, 1, length.out=255)
#check for number of input colors
if( length(numcols) > 255){
warning("The input vector requires a large number of colors,
some colors will be recycled, or appear extremely similar visually.")
}
#create colors
r <- sample(colseqR, length(numcols), replace = T)
g <- sample(colseqG, length(numcols), replace = T)
b <- sample(colseqB, length(numcols), replace = T)
colz <- rgb(red = r, green = g, blue = b, alpha = alpha)
tibble(
x = numcols,
colz = colz
) %>%
left_join(tibble(x = x), ., by = "x") %>%
pull(colz)
}
#simple data frame with factors
set.seed(12345) #make results reproducible
n <- 100
f <- 5
x <- sort(rnorm(n, mean = 0, sd = 50)) + rnorm(n, mean = 0, sd = 30)
fact <- rep(letters[1:5], each=n/f)
#call to as.color, with char vector
colz <- as.color(fact, alpha = 0.5)
plotx <- as.integer(as.factor(fact))
plot(jitter(plotx), x, col=colz, pch=19)
x
library(tidyverse)
as.color <- function(x, alpha = 0.5){
#get the number of colors needed
numcols <- unique(x)
colseqR <- seq(0, 1, length.out=255)
colseqG <- seq(0, 1, length.out=255)
colseqB <- seq(0, 1, length.out=255)
#check for number of input colors
if( length(numcols) > 255){
warning("The input vector requires a large number of colors,
some colors will be recycled, or appear extremely similar visually.")
}
#create colors
r <- sample(colseqR, length(numcols), replace = T)
g <- sample(colseqG, length(numcols), replace = T)
b <- sample(colseqB, length(numcols), replace = T)
colz <- rgb(red = r, green = g, blue = b, alpha = alpha)
tibble(
x = numcols,
colz = colz
) %>%
left_join(tibble(x = x), ., by = "x") %>%
pull(colz)
}
#simple data frame with factors
set.seed(12345) #make results reproducible
n <- 100
f <- 5
x <- sort(rnorm(n, mean = 0, sd = 50)) + rnorm(n, mean = 0, sd = 30)
fact <- rep(letters[1:5], each=n/f)
fact
#call to as.color, with char vector
colz <- as.color(fact, alpha = 0.5)
plotx <- as.integer(as.factor(fact))
plot(jitter(plotx), x, col=colz, pch=19)
plotx
plot(jitter(plotx), x, col=colz, pch=19)
plot(jitter(plotx), x, col=colz, pch=19, axes = F)
plot(jitter(plotx), x, col=colz, pch=19, xaxt = F)
plot(jitter(plotx), x, col=colz, pch=19, xax = F)
plot(jitter(plotx), x, col=colz, pch=19, xaxt = "none")
axis(side = 1, at = plotx, labels = fact)
library(as.color)
devtools::document(".")
devtools::install(".")
devtools::document("")
devtools::document(".")
devtools::install(".")
devtools::document(".")
devtools::install(".")
